name: Deploy new JSON's serving

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
    paths:
      - "**/data/projects/*.json"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Build interests with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./data
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  revalidate-cache:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract slug and revalidate cache if slug is not empty
        run: |
          # Get the list of changed files and extract slug using sed
          CHANGED_FILE=$(git diff --name-only HEAD | grep 'data/projects/' | sed 's|data/projects/\(.*\)\.json|\1|')

          if [ -n "$CHANGED_FILE" ]; then
            echo "Revalidating cache for slug: $CHANGED_FILE"
            curl --request POST "${{ vars.REVALIDATE_CACHE_URL }}/project-infos-${CHANGED_FILE}" \
              --header "${{ secrets.AUTH_HEADER }}"
            curl --request POST "${{ vars.REVALIDATE_CACHE_URL }}/all-projects" \
              --header "${{ secrets.AUTH_HEADER }}"
            curl --request POST "${{ vars.REVALIDATE_CACHE_URL }}/projects" \
              --header "${{ secrets.AUTH_HEADER }}"
            curl --request POST "${{ vars.REVALIDATE_CACHE_URL }}/project-options" \
              --header "${{ secrets.AUTH_HEADER }}"
          else
            echo "No project slug found, skipping cache revalidation."
          fi
